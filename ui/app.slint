import { Button, LineEdit, HorizontalBox, ComboBox, TextEdit, ScrollView } from "std-widgets.slint";

export component GridLineEdit {
    in property <string> label;
    in property <string> yyyymmdd: "";
    in-out property <string> text;

    HorizontalLayout {
        spacing: 8px;

        Text {
            text: label;
            vertical-alignment: center;
            horizontal-alignment: left;
            font-size: 15px;
            width: 160px;
            color: black;
        }

        LineEdit {
            text <=> root.text;
            placeholder-text: root.yyyymmdd;
            height: 34px;
            min-width: 0px;
            horizontal-stretch: 1;
        }
    }
}

export component SectionCard {
    in property <string> title;

    Rectangle {
        border-radius: 10px;
        background: #ffffff1A;
        border-width: 1px;
        border-color: #00000033;

        VerticalLayout {
            spacing: 8px;
            padding-left: 12px;
            padding-right: 12px;
            padding-top: 6px;
            padding-bottom: 8px;

            Text {
                text: title;
                color: #000000cc;
                font-weight: 600;
                font-size: 16px;
            }

            @children
        }
    }
}

export component ErrorBox {
    in property<string> title;
    in property<string> message;
    in-out property<float> state;

    Rectangle {
        width: 600px;
        height: 300px;
        border-radius: 10px;
        background: #ffd79cff;
        border-width: 1px;
        border-color: black;
        padding: 10px;
        z: 1000;
        opacity: root.state;

        Rectangle {
            border-color: black;
            border-width: 1px;
            border-radius: 0px;
            background: #e4513dff;
            width: 600px;
            height: 35px;
            y: 0px;

        Text {
            text: title;
            font-size: 16px;
            color: black;
            horizontal-alignment: center;
            y: 10px;
        }}

        Text {
            text: message;
            font-size: 14px;
            color: black;
            wrap: word-wrap;
            width: 580px;
            vertical-alignment: center;
            horizontal-alignment: center;
            y: 50px;
        }

        Button {
            text: "Close";
            width: 80px;
            height: 30px;
            y: 260px;
            clicked => { root.state = 0.0; }
        }
    }
}

export component InfoBox {
    in property<string> title;
    in property<string> message;
    in-out property<float> state;

    // tweakables
    in property<length> pad: 10px;
    in property<length> body_width: 280px;
    in property<length> header_h: 35px;
    in property<length> button_h: 30px;
    in property<length> gap: 10px;

    // derived sizes
    private property<length> outer_w: body_width + 2 * pad;
    private property<length> natural_h:
        header_h + gap + body_text.height + gap + button_h + 2 * pad;

    Rectangle {
        width: outer_w;
        height: natural_h;
        border-radius: 10px;
        background: #ffcb7dff;
        border-width: 1px;
        border-color:#000000;
        padding: 0px;
        z: 1000;
        opacity: root.state;

        // header
        Rectangle {
            width: parent.width;
            height: header_h;
            y: 0px;
            border-color: black;
            border-width: 1px;
            border-radius: 0px;
            background: #ffa41bff;

            Text {
                text: title;
                font-size: 16px;
                color: black;
                horizontal-alignment: center;
                vertical-alignment: center;
                // no hard-coded y; it centers in the header
            }
        }

        // body text (wrapped)
        body_text := Text {
            text: message;
            font-size: 14px;
            color: #000000;
            wrap: word-wrap;
            width: body_width;          // defines wrapping
            x: pad;
            y: header_h + gap + pad;    // sits below header
        }

        // Close button under the text
        Button {
            text: "Close";
            width: 80px;
            height: button_h;
            x: (parent.width - self.width) / 2; // center horizontally
            y: header_h + gap + pad + body_text.height + gap;
            clicked => { root.state = 0.0; }
        }
    }
}

export component GuideOverlay {
    in-out property <float> state;

    Rectangle {
        x: 0px; y: 0px;
        width: parent.width; height: parent.height;
        background: #00000080;
        opacity: root.state;
        z: 2000;

        panel := Rectangle {
            width: 1120px;
            height: 420px;
            x: (parent.width - self.width) * 0.5;
            y: (parent.height - self.height) * 0.5;
            border-radius: 10px;
            background: #f7ae6c;
            border-width: 1px;
            border-color:#000000;

            // typography + column widths
            private property<length> hdr_fs:   16px;
            private property<length> label_fs: 13px;
            private property<length> body_fs:  12px;
            private property<length> label_w: 140px;
            private property<length> desc_w:  360px;

            VerticalLayout {
                spacing: 10px;
                padding-left: 12px;
                padding-right: 12px;
                padding-top: 10px;
                padding-bottom: 10px;

                Text { text: "Guide"; font-weight: 700; font-size: panel.hdr_fs; color: black; }
                Rectangle { height: 1px; background: #000000; }

                // Scrollable area
                ScrollView {
                    vertical-stretch: 1;
                    horizontal-stretch: 1;

                    viewport := VerticalLayout {
                        spacing: 14px;

                       
                        HorizontalLayout {
                            spacing: 24px;

                            // LEFT INPUT COLUMN
                            GridLayout { spacing: 14px;
                                Text { text: "Laboratory";       width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 0; vertical-alignment: top; }
                                Text { text: "Organisation or institute that performed the run."; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 0; }

                                Text { text: "Run Number";       width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 1; vertical-alignment: top; }
                                Text { text: "Unique number with format: YYYYMMDD_XXX. Where YYYYMMDD is run date and XXX is the incremental run number of the year, e.g. 012."; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 1; }

                                Text { text: "Piranha Version";  width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 2; vertical-alignment: top; }
                                Text { text: "Version number can be found on the first page of the app when launched. Please keep Piranha up to date. Example: 1.3.1"; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 2; }

                                Text { text: "RTPCR primers";    width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 3; vertical-alignment: top; }
                                Text { text: "Primers used for RT-PCR step."; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 3; }

                                Text { text: "VP1 primers";      width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 4; vertical-alignment: top; }
                                Text { text: "Primers used for VP1 PCR step."; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 4; }

                            }
                            // RIGHT INPUT COLUMN
                            GridLayout { spacing: 14px;
                                Text { text: "Date RT";            width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 0; vertical-alignment: top; }
                                Text { text: "Date RT-PCR was performed. Please use YYYY-MM-DD format. Example: 2024-11-14"; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 0; }

                                Text { text: "Date VP1";           width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 1; vertical-alignment: top; }
                                Text { text: "Date VP1 PCR was performed. Please use YYYY-MM-DD format."; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 1; }

                                Text { text: "RT/VP1 PCR Machine";        width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 2; vertical-alignment: top; }
                                Text { text: "Brand and model of machine used for both PCRs. Example: Biorad CFX"; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 2; }

                                Text { text: "FlowCell Prior Uses";width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 3; vertical-alignment: top; }
                                Text { text: "If it is a new cell, put 0. If the cell has been used before, put 1. Example: 1"; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 3; }

                            }
                        }

                        
                        Rectangle { height: 1px; background: #00000066; }

                       
                        HorizontalLayout {
                            spacing: 24px;

                            // LEFT BUTTON COLUMN (3)
                            GridLayout { spacing: 14px;
                                Text { text: "Merge Button:";    width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 0; vertical-alignment: top; }
                                Text { text: "This will join both samples and EpiInfo information and add Run Information to the output detailed run report in the destination."; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 0; }

                                Text { text: "Template Button:"; width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 1; vertical-alignment: top; }
                                Text { text: "This will save a template of the sample file in the downloads folder."; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 1; }

                                Text { text: "Guide Button:";    width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 2; vertical-alignment: top; }
                                Text { text: "This will display this guide."; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 2; }
                            }

                            // RIGHT BUTTON COLUMN (2)
                            GridLayout { spacing: 14px;
                                Text { text: "Update Button:";  width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 0; vertical-alignment: top; }
                                Text { text: "This will update the EpiInfo of a detailed run report with the supplied epiinfo. The user doesn't need to fill in run information again."; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 0; }

                                Text { text: "Clear Button:";    width: panel.label_w; font-size: panel.label_fs; font-weight: 500; color: black; col: 0; row: 1; vertical-alignment: top; }
                                Text { text: "This will clear all inputted information."; width: panel.desc_w; font-size: panel.body_fs; wrap: word-wrap; color: black; col: 1; row: 1; }
                            }
                        }
                    }
                }

                // Close button
                HorizontalLayout {
                    spacing: 0px;
                    Rectangle { horizontal-stretch: 1; background: transparent; }
                    Button { text: "Close"; width: 84px; height: 30px; clicked => { root.state = 0.0; } }
                    Rectangle { horizontal-stretch: 1; background: transparent; }
                }
            }
        }
    }
}

export component AppWindow inherits Window {
    title: "Merger";
    // Fixed size window (no resizing)
    width: 1260px;
    height: 540px;
    icon: @image-url("psc_logo.png");

    // file paths
    in-out property <string> sample_file;
    in-out property <string> epiinfo_file;
    in-out property <string> minknow_file;
    in-out property <string> destination;

    // general info
    in-out property <string> lab;
    in-out property <string> run_num;
    in-out property <string> pir_ver;
    in-out property <string> minknow_ver;

    // control selections
    in-out property <string> pos_con <=> pos_box.current-value;
    in-out property <string> neg_con <=> neg_box.current-value;

    // PCR info
    in-out property <string> rt_date;
    in-out property <string> pcr_machine;
    in-out property <string> vp1_date;

    // EXTRA fields
    in-out property <string> rtpcr_primers;
    in-out property <string> vp1_pcr_machine;
    in-out property <string> vp1_primers;

    // sequencing info
    in-out property <string> seq_date;
    in-out property <string> seq_kit;
    in-out property <string> seq_hours;
    in-out property <string> fc_id;
    in-out property <string> fc_pores;
    in-out property <string> fc_uses;
    in-out property <string> fasta_date;

    // messages + guide
    in-out property<float> show_error: 0.0;
    in-out property<string> error_title: "";
    in-out property<string> error_message: "";
    in-out property<float> show_info: 0.0;
    in-out property<string> info_title: "";
    in-out property<string> info_message: "";
    in-out property<float> show_guide: 0.0;

    // callbacks
    callback select_file(string);
    callback merge(string);
    callback clear();
    callback update();
    callback template();

    // background
    Rectangle {
        background: @linear-gradient(180deg, #ffcb7dff 0%, #ffbe69ff 75%, #e4513dff 100%);
        border-color: black;
        border-width: 2px;
    }

    // OUTER LAYOUT
    VerticalLayout {
        spacing: 12px;
        padding: 14px;

        // Header row (Version at top-right)
        HorizontalLayout {
            spacing: 10px;

            Image { source: @image-url("psc_logo.png"); height: 36px; width: 36px; vertical-alignment: center; }
            Text { text: "Merger"; font-size: 28px; color: black; vertical-alignment: center; font-weight: 700; }

            Rectangle { horizontal-stretch: 1; background: transparent; } // spacer

            Text { text: "Version 1.0.0"; color: #000000cc; vertical-alignment: center; }
        }

        // RUN DETAILS
        SectionCard {
            title: "Run Details";

            GridLayout {
                spacing: 8px;

                // row 1
                GridLineEdit { label: "Laboratory";         text <=> root.lab;               row: 0; col: 0; }
                GridLineEdit { label: "Run Number";         text <=> root.run_num; yyyymmdd: "YYYYMMDD_XXX"; row: 0; col: 1; }
                GridLineEdit { label: "Piranha Version";     text <=> root.pir_ver;           row: 0; col: 2; }

                // row 2
                GridLineEdit { label: "RT Date";             text <=> root.rt_date; yyyymmdd: "YYYY-MM-DD";   row: 1; col: 0; }
                GridLineEdit { label: "VP1 Date";            text <=> root.vp1_date; yyyymmdd: "YYYY-MM-DD";  row: 1; col: 1; }
                GridLineEdit { label: "RTPCR Machine";       text <=> root.pcr_machine;        row: 1; col: 2; }
                GridLineEdit { label: "VP1 PCR Machine";     text <=> root.vp1_pcr_machine;    row: 1; col: 3; }

                // row 3 — PCR control dropdowns
                HorizontalLayout {
                    row: 2; col: 0; colspan: 4; spacing: 8px;

                    Text {
                        text: "PCR Control Check";
                        vertical-alignment: center;
                        font-size: 15px;
                        font-weight: 400;
                        width: 160px;
                        color: black;
                    }

                    pos_box := ComboBox {
                        model: ["Unselected","Positive Passed","Positive Failed"];
                        current-index: 0;
                        width: 220px;
                        height: 34px;
                    }

                    neg_box := ComboBox {
                        model: ["Unselected","Negative Passed","Negative Failed"];
                        current-index: 0;
                        width: 220px;
                        height: 34px;
                    }

                    Rectangle { horizontal-stretch: 1; background: transparent; }
                }

                // row 4
                GridLineEdit { label: "RTPCR Primers";       text <=> root.rtpcr_primers;     row: 3; col: 0; }
                GridLineEdit { label: "VP1 Primers";         text <=> root.vp1_primers;       row: 3; col: 1; }
                GridLineEdit { label: "FlowCell Prior Use";  text <=> root.fc_uses;           row: 3; col: 2; }
            }
        }

        // FILES
        SectionCard {
            title: "Files";

            GridLayout {
                spacing: 8px;

                HorizontalLayout { row: 0; col: 0; colspan: 4; spacing: 8px;
                    Text { text: "Samples"; width: 160px; vertical-alignment: center; color: black; }
                    LineEdit { text <=> root.sample_file; read-only: true; min-width: 0px; horizontal-stretch: 1; height: 34px; }
                    Button { text: "Select"; width: 96px; height: 34px; clicked => { select_file("sample_file"); } }
                }
                HorizontalLayout { row: 1; col: 0; colspan: 4; spacing: 8px;
                    Text { text: "MinKNOW"; width: 160px; vertical-alignment: center; color: black; }
                    LineEdit { text <=> root.minknow_file; read-only: true; min-width: 0px; horizontal-stretch: 1; height: 34px; }
                    Button { text: "Select"; width: 96px; height: 34px; clicked => { select_file("minknow_file"); } }
                }
                HorizontalLayout { row: 2; col: 0; colspan: 4; spacing: 8px;
                    Text { text: "Epi Info"; width: 160px; vertical-alignment: center; color: black; }
                    LineEdit { text <=> root.epiinfo_file; read-only: true; min-width: 0px; horizontal-stretch: 1; height: 34px; }
                    Button { text: "Select"; width: 96px; height: 34px; clicked => { select_file("epiinfo_file"); } }
                }
                HorizontalLayout { row: 3; col: 0; colspan: 4; spacing: 8px;
                    Text { text: "Destination"; width: 160px; vertical-alignment: center; color: black; }
                    LineEdit { text <=> root.destination; read-only: true; min-width: 0px; horizontal-stretch: 1; height: 34px; }
                    Button { text: "Select"; width: 96px; height: 34px; clicked => { select_file("destination"); } }
                }
            }
        }

        // ACTION BAR
        HorizontalLayout {
            spacing: 10px;

            Button { text: "Merge";    width: 96px; height: 34px; clicked => { merge("merge") } }
            Button { text: "Update";   width: 96px; height: 34px; clicked => { merge("update") } }
            Button { text: "Clear";    width: 96px; height: 34px; clicked => { clear() } }
            Button { text: "Template"; width: 96px; height: 34px; clicked => { template() } }

            Rectangle { horizontal-stretch: 1; background: transparent; }  // pushes Guide to the far right

            Button { text: "Guide";    width: 96px; height: 34px; clicked => { root.show_guide = 1.0 } }
        }
    }

    // overlays
    ErrorBox     { title: root.error_title; message: root.error_message; state <=> root.show_error; }
    InfoBox      { title: root.info_title;  message: root.info_message;  state <=> root.show_info;  }
    GuideOverlay { state <=> root.show_guide; }
}